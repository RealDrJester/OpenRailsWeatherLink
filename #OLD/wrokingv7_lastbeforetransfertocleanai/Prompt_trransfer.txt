Of course. This is an excellent idea. Creating a comprehensive, well-defined prompt is the key to reproducible and high-quality results from a coding AI. This prompt is built upon all the lessons we learned, the bugs we fixed, and the features we developed together. It is designed to be a blueprint for creating an exact copy of **ORTS WeatherLink**.

---

### **Prompt for AI Code Generation**

**High-Level Goal:**
Create a complete, multi-file Python desktop application named "ORTS WeatherLink". This application reads Open Rails activity files (`.act`), fetches real-world weather data from an API, and generates a new, non-destructive copy of the activity file with dynamic weather events injected. The application must be user-friendly, robust, and safe, never modifying original user files.

---

### **SYSTEM INSTRUCTIONS (Place this at the very beginning)**

**Core Principle: Maintain Cross-File Consistency**

When working on a project split across multiple Python files (e.g., a main application and several modules), your most critical task is to ensure that function and method calls remain valid after any code change.

Before you output the final set of files, you **MUST** perform a consistency check, especially after refactoring:

1.  **If you DELETE a function or method** in a module (e.g., `get_activity_path_coords` in `openrails_parser.py`), you **MUST** search all other files for any code that calls it and remove or update those calls.
2.  **If you RENAME a function or method**, you **MUST** search all other files and update every call to use the new name.
3.  **If you change the PARAMETERS** of a function (the number or names of arguments), you **MUST** search all other files and update every call to match the new signature.

The `AttributeError: 'ObjectName' object has no attribute 'function_name'` is the direct result of failing this check. It signals that the contract between the calling code and the module was broken. This is a critical failure mode that must be avoided at all costs.

---

### **Core Principles & Non-Negotiable Rules**

1.  **File Safety is Paramount:**
    *   **WHAT TO DO:** The program will now begin by making a direct, byte-for-byte copy of the original activity file. It will name this new file using your specified format: `originalfilename.WTHLINK.YYYYMMDD.act`. All subsequent modifications will be performed **only on this newly created copy**.
    *   **WHAT NOT TO DO:** **NEVER EVER OVERWRITE AN OPENRAILS FILE.** Especially any `*.act` file. The original activity file must never be opened in write mode.

2.  **Correct Weather Injection Method:**
    *   **WHAT TO DO:** The program must generate a series of self-contained `EventCategoryTime` blocks. Each of these blocks must contain its own `Outcomes` block, which in turn contains the full `ORTSWeatherChange (...)` definition. These complete `EventCategoryTime` blocks are then injected into the main `Events()` block of the activity file.
    *   **WHAT NOT TO DO:** **DO NOT** use or generate a `weathertransitions.dat` file for this method. Do not inject weather events at the root of the `Tr_Activity_File` block.

3.  **File Encoding:**
    *   **WHAT TO DO:** All Open Rails text files (`.act`, `.trk`, `.pat`) must be read by first attempting `UTF-16 LE BOM` and falling back to `UTF-8-SIG`.
    *   **WHAT NOT TO DO:** Do not assume all files are UTF-8. This will lead to file corruption.

4.  **No Feature Regressions:**
    *   **WHAT TO DO:** Ensure all features listed below are present and functional in the final code.
    *   **WHAT NOT TO DO:** Do not delete or disable features from previous versions, such as historical weather, activity highlighting, or debug tools.

5.  **Naming Convention:**
    *   **In-Game Activity Name:** `Original Activity Name [WTHLINK.YYYYMMDD]`
    *   **Windows Filename:** `originalfilename.WTHLINK.YYYYMMDD.act`

### **Feature Breakdown**

The application must include the following features:

*   **GUI:**
    *   A modern, themed GUI using `tkinter` and `sv-ttk`.
    *   A dark/light theme toggle.
    *   Automatic detection of Open Rails `Content` folders with a dropdown menu for selection.
    *   A status bar with a loading message and an animated progress bar for long operations.
    *   Scrollbars on the Route and Activity listboxes.

*   **Information Display:**
    *   An interactive map view (`tkintermapview`) that displays the activity's path.
    *   The map must automatically center and zoom to fit the entire path when an activity is selected.
    *   A tabbed interface for displaying:
        1.  The activity's `Description` and `Briefing`.
        2.  A table of **Existing Weather** found in the selected file, including the activity's Season.
        3.  A **Forecast Table** showing the next 24 hours of weather from the API.
        4.  A **Forecast Chart** (`matplotlib`) plotting Temperature, Cloud Cover, Wind, Rain, and View Distance.
        5.  A **Debug Console** with a button to generate chaotic weather for testing.

*   **Core Functionality:**
    *   **Live Weather:** Fetches and displays current weather and a 24-hour forecast.
    *   **Historical Weather:** Allows the user to pick a past date and starting hour to fetch and preview historical weather data.
    *   **Chaotic Weather:** A debug function to generate an activity with rapidly changing, exaggerated weather for testing purposes.
    *   **Season-Aware Logic:** The generated weather's precipitation type (Rain vs. Snow) must be based on the activity's `Season` setting.

*   **File Handling & Safety:**
    *   **Safe "Copy-First" Workflow:** As described in the Core Principles.
    *   **Intelligent Backup:** Back up the `weathertransitions.dat` file **only if it exists and contains user-made changes**.
    *   **Highlighting:** Activities in the list for which a `.WTHLINK.*.act` file already exists must be highlighted in red.

### **Technical Specifications**

*   **Language:** Python 3.x
*   **Libraries:** `tkinter`, `sv-ttk`, `requests`, `tkintermapview`, `matplotlib`, `tkcalendar`.
*   **API Endpoints:**
    *   Forecast: `https://api.open-meteo.com/v1/forecast`
    *   Historical: `https://archive-api.open-meteo.com/v1/archive`
*   **File Structure:** The program must be split into the following five files:

    1.  **`main_app.pyw`**: The main application entry point. Contains the `Tk` root, UI layout, and event handling logic that connects all other modules.
    2.  **`config_manager.py`**: A class to handle loading and saving application settings (theme, window size, known content paths) to a `config.json` file.
    3.  **`ui_components.py`**: Contains custom UI widget classes, specifically the `AboutWindow`, `DateSelectionWindow`, and the `ForecastChart` (matplotlib widget).
    4.  **`weather_service.py`**: A class responsible for all communication with the weather API. It should handle fetching both live and historical data and contain the logic to format the JSON response into the correct `ORTSWeatherChange` event strings.
    5.  **`openrails_parser.py`**: A class that handles all reading and writing of Open Rails files. This includes parsing `.trk`, `.act`, and `.pat` files, implementing the Goode Homolosine projection, and performing the safe file copy and modification operations.

### **Final Output Format**

Please generate the complete source code for all five Python files. Each file's code should be in its own distinct, clearly labeled code block.